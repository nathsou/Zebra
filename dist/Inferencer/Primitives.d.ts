export declare type PrimitiveFunction = keyof (typeof primitivesObj);
declare const primitivesObj: {
    plusInt: import("./Types").PolyTy;
    minusInt: import("./Types").PolyTy;
    timesInt: import("./Types").PolyTy;
    divideInt: import("./Types").PolyTy;
    modInt: import("./Types").PolyTy;
    eqInt: import("./Types").PolyTy;
    lssInt: import("./Types").PolyTy;
    leqInt: import("./Types").PolyTy;
    gtrInt: import("./Types").PolyTy;
    geqInt: import("./Types").PolyTy;
    stringOfInt: import("./Types").PolyTy;
    plusFloat: import("./Types").PolyTy;
    minusFloat: import("./Types").PolyTy;
    timesFloat: import("./Types").PolyTy;
    divideFloat: import("./Types").PolyTy;
    eqFloat: import("./Types").PolyTy;
    lssFloat: import("./Types").PolyTy;
    leqFloat: import("./Types").PolyTy;
    gtrFloat: import("./Types").PolyTy;
    geqFloat: import("./Types").PolyTy;
    floatOfInt: import("./Types").PolyTy;
    stringOfFloat: import("./Types").PolyTy;
    eqChar: import("./Types").PolyTy;
};
export declare const primitives: Map<string, import("./Types").PolyTy>;
export declare function isPrimitiveFunc(f: string): f is PrimitiveFunction;
export declare const primitiveEnv: () => import("../Utils/Env").Env<import("./Types").PolyTy>;
export {};
