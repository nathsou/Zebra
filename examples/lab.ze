
data Bool = True | False;
data Maybe a = None | Some a;
data List a = Nil | Cons a (List a);
data Nat = S Nat | Zero;

class Show a where
    show : a -> List Char;

instance Show Char where
    show c = [c];

instance Show Bool where
    show True = "True",
    show False = "False";

instance Show (List Char) where
    show str = str;

instance (Show a) => Show (List a) where
    show [] = "[]",
    show lst = flatten ["[", join "," (map show lst), "]"];

instance Show Nat where
    show Zero = "Zero",
    show (S prev) = flatten ["S(", show prev, ")"];

instance (Show a) => Show (Maybe a) where
    show None = "None",
    show (Some x) = "Some " ++ (show x);

instance Show Int where
    show = stringOfInt;

instance Show Float where
    show = stringOfFloat;

map _ [] = [];
map f h::tl = (f h)::(map f tl);

(++) as [] = as;
(++) [] bs = bs;
(++) a::as bs = a :: (as ++ bs);

append as bs = bs ++ as;

flatten lists = flatten' lists [];
flatten' [] acc = acc;
flatten' lst::lists acc = flatten' lists (append lst acc);

intercalate _ [] = [];
intercalate _ [x] = [x];
intercalate sep h::tl = h::sep::(intercalate sep tl);

join sep lst = flatten (intercalate sep lst);

not False = True;
not True = False;

class Eq a where
    (==) : a -> a -> Bool;

(/=) x y = not (x == y);

instance Eq Int where
    (==) = eqInt;

instance Eq Nat where
    (==) Zero Zero = True,
    (==) (S a) (S b) = a == b,
    (==) _ _ = False;

instance Eq Bool where
    (==) True True = True,
    (==) False False = True,
    (==) _ _ = False;

instance (Eq a) => Eq (List a) where
    (==) [] [] = True,
    (==) a::as b::bs = if a == b then as == bs else False,
    (==) _ _ = False;

class Num a where
    (+) : a -> a -> a,
    (*) : a -> a -> a,
    fromInt : Int -> a;

instance Num Int where
    (+) = plusInt,
    (*) = timesInt,
    fromInt n = n;

instance Num Float where
    (+) = plusFloat,
    (*) = timesFloat,
    fromInt = floatOfInt;

instance Num Nat where
    (+) a Zero = a,
    (+) Zero b = b,
    (+) (S a) b = S (a + b),
    (+) a (S b) = S (a + b),

    (*) _ Zero = Zero,
    (*) Zero _ = Zero,
    (*) (S a) b = (a * b) + b,
    (*) a (S b) = (a * b) + a,

    fromInt 0 = Zero,
    fromInt n = S (fromInt (minusInt n 1));

any _ [] = False;
any pred x::xs = if pred x then True else any pred xs;

elem x = any (\y -> x == y);

range n = range' n [];
range' 0 acc = acc;
range' n acc = range' (minusInt n 1) (n::acc);

main = 3 * 7 + 2;