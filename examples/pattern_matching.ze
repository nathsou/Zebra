
data List a = Nil | Cons a (List a);
data Pair a b = MkPair a b;

main = case MkPair 1 (Cons 3 Nil) of (MkPair fst snd) -> fst;

-- data Bool = True | False;
-- data Maybe a = None | Some a;
-- data List a = Nil | Cons a (List a);

-- isNone None = True;
-- isNone _ = False;

-- isSome (Some _) = True;
-- isSome _ = False;

-- len x0 = case x0 of
--     | Nil -> 0
--     | (Cons h tl) -> (len tl) + 1;

-- and True True = True;
-- and _ _ = False;

-- range n = Cons n (if n == 0 then Nil else range (n - 1));

-- -- main = case (1, 2) of (a, b, _) -> a + b | (a, b) -> a + b;
-- -- main = len (range 327);
-- -- main = let x0 = None in case x0 of None -> True  | (Some x) -> False;
-- main = isNone;