-- Girafe interpreter

data Bool = True | False;
data List a = Nil | Cons a (List a);
data Maybe a = None | Some a;

data Term =
    | Var (List Char)
    | Fun (List Char) (List Term);

trs = [
    (Fun "Add" [Var "a", Fun "0" []], Var "a"),
    (Fun "Add" [Fun "0" [], Var "b"], Var "b"),
    (Fun "Add" [Fun "S" [Var "a"], Var "b"], Fun "S" [Fun "Add" [Var "a", Var "b"]]),
    (Fun "Add" [Var "a", Fun "S" [Var "b"]], Fun "S" [Fun "Add" [Var "a", Var "b"]]),
    (Fun "1" [], Fun "S" [Fun "0" []]),
    (Fun "2" [], Fun "S" [Fun "1" []]),
    (Fun "3" [], Fun "S" [Fun "2" []]),
    (Fun "4" [], Fun "S" [Fun "3" []]),
    (Fun "5" [], Fun "S" [Fun "4" []]),
    (Fun "6" [], Fun "S" [Fun "5" []]),
    (Fun "7" [], Fun "S" [Fun "6" []]),
    (Fun "8" [], Fun "S" [Fun "7" []]),
    (Fun "9" [], Fun "S" [Fun "8" []]),
    (Fun "10" [], Fun "S" [Fun "9" []]),
    (Fun "Range" [Var "n"], Fun "RangeAux" [Var "n", Fun "Nil" []]),
    (Fun "RangeAux" [Fun "0" [], Var "acc"], Var "acc"),
    (Fun "RangeAux" [Fun "S" [Var "n"], Var "acc"], Fun "RangeAux" [Var "n", Fun "Cons" [Var "n", Var "acc"]])
];

ruleName (Fun f _, _) = f;

map _ [] = [];
map f h::tl = (f h) :: (map f tl);

prepend as [] = as;
prepend [] bs = bs;
prepend a::as bs = a :: (prepend as bs);

append as bs = prepend bs as;

flatten lists = flatten' lists [];
flatten' [] acc = acc;
flatten' lst::lists acc = flatten' lists (append lst acc);

intercalate _ [] = [];
intercalate _ [x] = [x];
intercalate sep h::tl = h :: sep :: (intercalate sep tl);

join sep lst = flatten (intercalate sep lst);

show (Var x) = x;
show (Fun f []) = f;
show (Fun f args) = flatten [f, "(", join "," (map show args), ")"];

showRule (lhs, rhs) = flatten [show lhs, " -> ", show rhs];

len [] = 0;
len _::tl = (len tl) + 1;

zip [] _ = [];
zip _ [] = [];
zip a::as b::bs = (a, b)::(zip as bs);

and True True = True;
and _ _ = False;

unify s t = unify' [(s, t)] [];

unify' [] sig = Some sig;
unify' ((Var a, Var b)::eqs) sig = 
    if a == b then unify' eqs sig
    else unify' eqs ((a, Var b)::sig);
unify' ((Var a, t)::eqs) sig = unify' eqs ((a, t)::sig);
unify' ((Fun f as, Fun g bs)::eqs) sig =
    if and (f == g) ((len as) == (len bs))
    then unify' (prepend (zip as bs) eqs) sig
    else None;
unify' _ _ = None;


findSubst x [] = Var x;
findSubst x (y, t)::tl = if x == y then t else findSubst x tl;

substitute (Var x) sig = findSubst x sig;
substitute (Fun f args) sig = Fun f (map (\a -> substitute a sig) args);

-- TODO: fix compilation of case .. of expressions

-- findRule _ [] = None;
-- findRule t (lhs, rhs)::rules = 
--     case unify lhs t of
--         | None -> findRule t rules
--         | Some sig -> Some ((lhs, rhs), sig);

findRule _ [] = None;
findRule t (lhs, rhs)::rules = findRule' t (unify lhs t) (lhs, rhs) rules;
findRule' t None _ rules = findRule t rules;
findRule' t (Some subst) r _ = Some (r, subst);

-- reduce (Var x) _ = (Var x, False);
-- reduce (Fun f args) rules = 
--     let s = Fun f (map (\a -> normalize a rules) args) in
--     case findRule s rules of
--         | None -> (s, False)
--         | Some ((_, rhs), sig) -> (substitute rhs sig, True);

reduce (Var x) _ = (Var x, False);
reduce (Fun f args) rules =
    let s = Fun f (map (\t -> normalize t rules) args) in
    reduce' s (findRule s rules);
reduce' t None = (t, False);
reduce' _ (Some ((lhs, rhs), subst)) = (substitute rhs subst, True);

normalize term rules = normalize' (term, True) rules;
normalize' (t, True) rules = normalize' (reduce t rules) rules;
normalize' (t, False) rules = t;

main = normalize (Fun "Range" [Fun "1" []]) trs;