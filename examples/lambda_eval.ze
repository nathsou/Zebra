import "../prelude/Prelude.ze" (
    Bool, List, Maybe, Eq, Ord, Num,
    not, and, or
);

data BinaryOperator = 
    Plus | Minus | Times | Divide | Modulo | Lss |
    Leq | Gtr | Geq | Eq | Neq | And | Or;

data UnaryOperator = Neg | Not;

data Expr = 
    Const Value |
    BinOp BinaryOperator Expr Expr |
    MonOp UnaryOperator Expr |
    Var (List Char) |
    LetIn (List Char) Expr Expr |
    If Expr Expr Expr |
    Lambda (List Char) Expr |
    App Expr Expr |
    LetRecIn (List Char) (List Char) Expr Expr;

data Value =
    IntVal Int |
    BoolVal Bool |
    ClosureVal (List Char) Expr (List (List Char, Value)) |
    ClosureRecVal (List Char) (List Char) Expr (List (List Char, Value));

intOf (IntVal n) = n;
boolOf (BoolVal q) = q;

intBinOp op a b env = 
    IntVal (op (intOf (eval a env)) (intOf (eval b env)));

boolBinOp op a b env = 
    BoolVal (op (intOf (eval a env)) (intOf (eval b env)));

logicalBinOp op a b env = 
    BoolVal (op (boolOf (eval a env)) (boolOf (eval b env)));

lookupEnv x [] = None; 
lookupEnv x (y, v)::tl = if y == x then Some v else lookupEnv x tl;

unwrap (Some x) = x;

closureOf (ClosureRecVal f x body env) = 
    let recVal = ClosureRecVal f x body env in
    ClosureVal x body ((f, recVal)::env);
closureOf v = v;

eval (Const v) _ = v;
eval (MonOp Neg n) env = IntVal (0 - (intOf (eval n env)));
eval (MonOp Not q) env = BoolVal (not (boolOf (eval q env)));
eval (BinOp Plus a b) env = intBinOp (+) a b env;
eval (BinOp Minus a b) env = intBinOp (-) a b env;
eval (BinOp Times a b) env = intBinOp (*) a b env;
eval (BinOp Divide a b) env = intBinOp (/) a b env;
eval (BinOp Modulo a b) env = intBinOp (%) a b env;
-- FIXME: (<) should work { Îµ14 : Int }
eval (BinOp Lss a b) env = boolBinOp (lssInt) a b env;
eval (BinOp Leq a b) env = boolBinOp (<=) a b env;
eval (BinOp Gtr a b) env = boolBinOp (>) a b env;
eval (BinOp Geq a b) env = boolBinOp (>=) a b env;
eval (BinOp Eq a b) env = boolBinOp (==) a b env;
eval (BinOp Neq a b) env = boolBinOp (\n m -> not (n == m)) a b env;
eval (BinOp And a b) env = logicalBinOp and a b env;
eval (BinOp Or a b) env = logicalBinOp or a b env;
eval (Var x) env = unwrap (lookupEnv x env); 
eval (LetIn x val e) env = eval e ((x, eval val env)::env);
eval (If cond t e) env = 
    if (boolOf (eval cond env))
        then (eval t env)
        else (eval e env);
eval (Lambda x body) env = ClosureVal x body env;
eval (App lhs rhs) env1 = 
    let v = eval rhs env1 in
    let (ClosureVal x body env2) = closureOf (eval lhs env1) in
    eval body ((x, v)::env2);
eval (LetRecIn f x body e) env = 
    let recVal = ClosureRecVal f x body env in
    eval e ((f, recVal)::env);

fact n = intOf (eval (LetRecIn "fact" "n" (
        If (BinOp Eq (Var "n") (Const (IntVal 0)))
            (Const (IntVal 1))
            (BinOp Times (Var "n") (App (Var "fact") (BinOp Minus (Var "n") (Const (IntVal 1)))))
    ) (App (Var "fact") (Const (IntVal n)))) []);

isPrime n = boolOf (eval (LetRecIn "isPrime" "n" (
    Lambda "i" (
        If (BinOp Leq (BinOp Times (Var "i") (Var "i")) (Var "n"))
            (If (BinOp Eq (BinOp Modulo (Var "n") (Var "i")) (Const (IntVal 0)))
                (Const (BoolVal False))
                (App (App (Var "isPrime") (Var "n")) (BinOp Plus (Var "i") (Const (IntVal 1))))
            )
            (BinOp Neq (Var "n") (Const (IntVal 1)))
    )
) (App (App (Var "isPrime") (Const (IntVal n))) (Const (IntVal 2)))) []);

listPrimes n = listPrimes' n [];

listPrimes' 0 acc = acc;
listPrimes' n acc = listPrimes' (n - 1) (if isPrime n then n::acc else acc);

main = listPrimes 100;